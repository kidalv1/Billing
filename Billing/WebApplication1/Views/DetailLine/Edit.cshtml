@model DTO.Models.DetailLine

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>DetailLine</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Item, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Item, new { htmlAttributes = new { @class = "form-control" , required = "required"  } })
                @Html.ValidationMessageFor(model => model.Item, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PricePiece, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PricePiece, new { htmlAttributes = new { @class = "form-control" , required = "required", onchange = "ValidationValue('PricePiece')" } })
                @Html.ValidationMessageFor(model => model.PricePiece, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" , required = "required", onchange = "ValidationValue('Discount')" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CountOfItems, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CountOfItems, new { htmlAttributes = new { @class = "form-control", required = "required", onchange = "ValidationValue('CountOfItems')" } })
                @Html.ValidationMessageFor(model => model.CountOfItems, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
  function ValidationValue(id) {
    var input = document.getElementById(id).value;
    var inputReplace = input.replace(/,/, ".");
    if (input < 0 || isNaN(inputReplace)) {
      alert("Het moet een positieve getal zijn");
      document.getElementById(id).value = 0;
    }
  }
</script>
